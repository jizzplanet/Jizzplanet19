# Python code obfuscated by www.development-tools.net 
 

import base64, codecs
magic = ''
love = ''
god = ''
destiny = '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'
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))